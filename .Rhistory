install.packages('devtools')
install.packages(c("evaluate", "MASS"))
source('~/getdata/idaho.R')
install.packages("xlsx")
install.packages("xlsx")
install.packages("RJavaTools")
options(java.parameters = "-Xmx1000m")
source('~/getdata/idaho.R')
options(java.parameters = "-Xmx2000m")
source('~/getdata/idaho.R')
install.packages("rJava")
source('~/getdata/idaho.R')
options(java.parameters = "-Xmx1000m")
source('~/getdata/idaho.R')
options(java.parameters = "-Xmx1000m")
source('~/getdata/idaho.R')
options(java.parameters = "-Xmx2000m")
source('~/getdata/idaho.R')
source('~/getdata/idaho.R')
options(java.parameters = "-Xmx5000m")
source('~/getdata/idaho.R')
source('~/getdata/idaho.R')
install.packages("XLConnect")
?XLConnect
??XLConnect
set.seed(100)
norm_vec <- rnorm(n=10, mean=5, sd=2)
sample(norm_vec, size = 25, replace=FALSE)
sample(norm_vec, size = 10, replace=FALSE)
install.packages("rpart")
for (i in 1:10) {}
for (i in 1:10) { if (i %% 2 == 0) { cat(paste(i, "is even.\n", sep=" "))}}
1:10
1:0, function(x) integrate(x ^ 2 - x)
lapply(1:0, function(x) integrate(x ^ 2 - x)
)
integrate(function(x ^ 2 - x))
integrate(function(x) x ^ 2 - x, 0, 10)
library(quantMod)
library(quantmod)
getSymbols.FRED('ITNETUSERP2THA')
getSymbols.FRED(ITNETUSERP2THA)
getSymbols.FRED(GDP)
getSymbols.FRED('GDP')
integrate(function(x) sin(x) + cos(x), -pi,pi)
integrate(function(x) exp(x) / x, 10, 20)
getSymbols.FRED(Symbols=c('ITNETUSERP2THA'))
getSymbols.FRED(Symbols=c('ITNETUSERP2THA'),env=.GlobalEnv,return.class=character)
test <- getSymbols.FRED(Symbols=c('ITNETUSERP2THA'),env=.GlobalEnv,return.class=character)
getSymbols.FRED('gdpc1')
getSymbols.FRED('GDPC1')
library(httr)
apiKey <- '76bb1186e704598b725af0a27159fdfc'
apiString <- '&api_key'
baseUrl <- 'http://api.stlouisfed.org/fred/release/series?release_id='
releaseId <- '234'
fileTypeString <- '&file_type=json'
fullUrl <- paste(baseUrl,releaseId,apiString,fileTypeString,sep="")
fullUrl
release <- GET(fullUrl)
str(release)
json1 <- content(release)
install.packages(jsonlite)
install.packages('jsonlite')
json1 <- content(release)
source('~/datasciencecoursera/functional_R/internetUsageFunctionalScript.R')
fullUrl
source('~/datasciencecoursera/functional_R/internetUsageFunctionalScript.R')
fullUrl
source('~/datasciencecoursera/functional_R/internetUsageFunctionalScript.R')
head(json1)
source('~/datasciencecoursera/functional_R/internetUsageFunctionalScript.R')
source('~/datasciencecoursera/functional_R/internetUsageFunctionalScript.R')
source('~/datasciencecoursera/functional_R/internetUsageFunctionalScript.R')
source('~/datasciencecoursera/functional_R/internetUsageFunctionalScript.R')
head(json1)
tail(json1)
source('~/datasciencecoursera/functional_R/internetUsageFunctionalScript.R')
head(json2)
json2[1,1:4]
json2[1,1]
json2[,1]
json2[,]
json2[,1:4]
json2[1:4,]
json2$seriess
json2$seriess == 'Internet'
json3 <- json2[grepl("ITNET",json2$seriess)]
json3
json2
head(json2,30)
head(json2)
head(json2,10)
head(json2,6)
head(json2,7)
head(json2,8)
json3 <- json2$seriess
head(json3)
json4 <- json3[grepl("ITNET",json3$id)]
json4 <- json3[grepl("ITNET",json3$id),]
head(json4)
json5 <- data.frame(json4$id,json4$title)
View(json5)
json5 <- cbind(json4$id,json4$title)
View(json5)
aseanCtry <- c("Thailand", "Myanmar", "Cambodia", "Laos", "Malaysia", "Vietnam", "Indonesia", "Singapore", "Philipines", "Brunei")
length(aseanCtry)
names(json5) <- c('id', 'title')
View(json5)
names(json5) <- names(c('id', 'title'))
View(json5)
names(json5)
names(json5) <- c('id', 'title')
names(json5)
View(json5)
colnames(json5)
colnames(json5) <- c('id', 'title')
View(json5)
getSeriesIds <- function(x) {
aseanCtry <- c("Thailand", "Myanmar", "Cambodia", "Laos", "Malaysia", "Vietnam", "Indonesia", "Singapore", "Philipines", "Brunei")
lapply(aseanCtry function(x) grepl(x,x=json5$tile))
}
getSeriesIds <- function(x) {
aseanCtry <- c("Thailand", "Myanmar", "Cambodia", "Laos", "Malaysia", "Vietnam", "Indonesia", "Singapore", "Philipines", "Brunei")
lapply(aseanCtry function(f) grepl(f,x=json5$tile))
}
getSeriesIds <- function(x) {
aseanCtry <- c("Thailand", "Myanmar", "Cambodia", "Laos", "Malaysia", "Vietnam", "Indonesia", "Singapore", "Philipines", "Brunei")
lapply(aseanCtry, function(f) grepl(f,x=json5$tile))
}
getSeriesIds <- function(x) {
aseanCtry <- c("Thailand", "Myanmar", "Cambodia", "Laos", "Malaysia", "Vietnam", "Indonesia", "Singapore", "Philipines", "Brunei")
lapply(aseanCtry, function(f) grepl(f,x=json5$title))
}
getSeriesIds <- function(x) {
aseanCtry <- c("Thailand", "Myanmar", "Cambodia", "Laos", "Malaysia", "Vietnam", "Indonesia", "Singapore", "Philipines", "Brunei")
json6 <- lapply(aseanCtry, function(f) grepl(f,x=json5$title))
}
lapply(aseanCtry, function(f) grepl(f,x=json5$title))
View(json5)
test <- lapply(aseanCtry, function(f) grepl(f,x=json5$title))
test
lapply(aseanCtry, function(f) json6[grepl(f,json5$title),])
lapply(aseanCtry, function(f) json5[grepl(f,json5$title),])
View(json5)
lapply(aseanCtry, function(f) which(json5$title == grepl(aseanCtry,json$title)))
lapply(aseanCtry, function(f) which(json5$title == grepl(aseanCtry,json5$title)))
lapply(aseanCtry, function(f) which(json5$title == grepl(aseanCtry,json5$title)))
grepl(function(f) json5$title,aseanCtry)
grepl(function(f) aseanCtry, json5$title)
grepl(aseanCtry, json5$title)
seq_along(grepl(along.with=aseanCtry,json5$title))
seq_along(aseanCtry, function(f) grepl(f, json5$title))
power <- function(exponent) {
function(x) {
x ^ exponent
}
}
square <- power(2)
square(2)
square(x=4)
cube <- power(3)
cube(x=4)
square
as.list(environment(fun=square))
library(pryr)
install.packages('pryr')
rm(json4)
rm(json3)
rm(json2)
rm(json1)
json6 <- json5[grep("Thailand | Myanmar | Cambodia | Laos | Malaysia | Viet Nam | Indonesia |Singapore | Philippines | Brunei"),json5$title,ignore.case=T)]
json6 <- json5[grepl("Thailand | Myanmar | Cambodia | Laos | Malaysia | Viet Nam | Indonesia |Singapore | Philippines | Brunei",json5$title,ignore.case=T)]
json6 <- which(json5[grepl("Thailand | Myanmar | Cambodia | Laos | Malaysia | Viet Nam | Indonesia |Singapore | Philippines | Brunei",json5$title,ignore.case=T)])
json6 <- json5[grep("Thailand | Myanmar | Cambodia | Laos | Malaysia | Viet Nam | Indonesia |Singapore | Philippines | Brunei",json5$title,ignore.case=T)]
json6
json6 <- json5[grep("Thailand | Myanmar | Cambodia | Laos | Malaysia | Viet Nam | Indonesia |Singapore | Philippines | Brunei",json5$title,ignore.case=T),]
View(json6)
json6 <- json5[grep(pattern="Thailand | Myanmar | Cambodia | Laos | Malaysia | Viet Nam | Indonesia |Singapore | Philippines | Brunei",x=json5$title,ignore.case=T)]
json6 <- json5[grep(pattern="(Thailand | Myanmar | Cambodia | Laos | Malaysia | Viet Nam | Indonesia | Singapore | Philippines | Brunei)",x=json5$title,ignore.case=T)]
json6 <- json5[grep(pattern="$(Thailand | Myanmar | Cambodia | Laos | Malaysia | Viet Nam | Indonesia | Singapore | Philippines | Brunei)",x=json5$title,ignore.case=T)]
json6 <- json5[grep(pattern="(Thailand | Myanmar | Cambodia | Laos | Malaysia | Viet Nam | Indonesia | Singapore | Philippines | Brunei)$",x=json5$title,ignore.case=T)]
json6 <- json5[grep(pattern="(Thailand | Myanmar | Cambodia | Laos | Malaysia | Viet Nam | Indonesia | Singapore | Philippines | Brunei)$",x=json5$title,ignore.case=T),]
View(json6)
json6 <- json5[grep(pattern=seq_along(aseanCtry),x=json5$title,ignore.case=T)]
install.packages("knitr")
library(knitr)
?knit
?unlist
setwd("~/datasciencecoursera/RepData_PeerAssessment1")
debugSource('~/datasciencecoursera/RepData_PeerAssessment1/analysisScript.R')
debugSource('~/datasciencecoursera/RepData_PeerAssessment1/analysisScript.R')
missings <- is.na(activityRaw)
sumMissings <- sum(missing)
sumMissings <- sum(missing)
debugSource('~/datasciencecoursera/RepData_PeerAssessment1/analysisScript.R')
debugSource('~/datasciencecoursera/RepData_PeerAssessment1/analysisScript.R')
g <- ggplot(activityInterval, aes(interval, averageSteps, color))
g + geom_line(aes( y = averageSteps )) + xlab("Interval") + ylab("Average Steps") + scale_color_brewer() + ggtitle("Average Number of Steps Per Interval")
ggsave(filename="meanSteps.png", width=4.80, height=4.80, dpi = 100)
g <- ggplot(activityInterval, aes(interval, averageSteps, color=averageSteos))
g + geom_line(aes( y = averageSteps )) + xlab("Interval") + ylab("Average Steps") + scale_color_brewer() + ggtitle("Average Number of Steps Per Interval")
ggsave(filename="meanSteps.png", width=4.80, height=4.80, dpi = 100)
g <- ggplot(activityInterval, aes(interval, averageSteps, color=averageSteps))
g + geom_line(aes( y = averageSteps )) + xlab("Interval") + ylab("Average Steps") + scale_color_brewer() + ggtitle("Average Number of Steps Per Interval")
ggsave(filename="meanSteps.png", width=4.80, height=4.80, dpi = 100)
g <- ggplot(activityInterval, aes(interval, averageSteps))
g + geom_line(aes( y = averageSteps ) ) + xlab("Interval") + ylab("Average Steps") + scale_color_brewer(palette=blue) + ggtitle("Average Number of Steps Per Interval")
ggsave(filename="meanSteps.png", width=4.80, height=4.80, dpi = 100)
g <- ggplot(activityInterval, aes(interval, averageSteps))
g + geom_line(aes( y = averageSteps ), colour="blue", size = 1) + xlab("Interval") + ylab("Average Steps") + scale_color_brewer(palette=blue) + ggtitle("Average Number of Steps Per Interval")
ggsave(filename="meanSteps.png", width=4.80, height=4.80, dpi = 100)
g <- ggplot(activityInterval, aes(interval, averageSteps))
g + geom_line(aes( y = averageSteps ), colour="blue", size = 1) + xlab("Interval") + ylab("Average Steps") + scale_color_brewer() + ggtitle("Average Number of Steps Per Interval")
ggsave(filename="meanSteps.png", width=4.80, height=4.80, dpi = 100)
g <- ggplot(activityInterval, aes(interval, averageSteps))
g + geom_line(aes( y = averageSteps ), colour=clarity, size = 1) + xlab("Interval") + ylab("Average Steps") + scale_color_brewer() + ggtitle("Average Number of Steps Per Interval")
ggsave(filename="meanSteps.png", width=4.80, height=4.80, dpi = 100)
g <- ggplot(activityInterval, aes(interval, averageSteps))
g + geom_line(aes( y = averageSteps ), size = 1) + xlab("Interval") + ylab("Average Steps") + scale_color_brewer() + ggtitle("Average Number of Steps Per Interval")
ggsave(filename="meanSteps.png", width=4.80, height=4.80, dpi = 100)
g <- ggplot(activityInterval, aes(interval, averageSteps))
g + geom_line(aes( y = averageSteps ), size = 1) + xlab("Interval") + ylab("Average Steps") + ggtitle("Average Number of Steps Per Interval")
g + scale_color_brewer()
ggsave(filename="meanSteps.png", width=4.80, height=4.80, dpi = 100)
g <- ggplot(activityInterval, aes(interval, averageSteps))
g + geom_line(aes( y = averageSteps ), colour="368BC1",size = 1) + xlab("Interval") + ylab("Average Steps") + ggtitle("Average Number of Steps Per Interval")
ggsave(filename="meanSteps.png", width=4.80, height=4.80, dpi = 100)
g <- ggplot(activityInterval, aes(interval, averageSteps))
g + geom_line(aes( y = averageSteps ), colour=368BC1,size = 1) + xlab("Interval") + ylab("Average Steps") + ggtitle("Average Number of Steps Per Interval")
ggsave(filename="meanSteps.png", width=4.80, height=4.80, dpi = 100)
g <- ggplot(activityInterval, aes(interval, averageSteps))
g + geom_line(aes( y = averageSteps ), colour="#368BC1",size = 1) + xlab("Interval") + ylab("Average Steps") + ggtitle("Average Number of Steps Per Interval")
ggsave(filename="meanSteps.png", width=4.80, height=4.80, dpi = 100)
?apply
apply(activityRaw, 1, function(x) if(activityRaw$steps == "NA") print("TRUE"))
apply(activityRaw, 1, function(x) if(x == "NA") print("TRUE"))
apply(activityRaw, 2, function(x) if(x == "NA") print("TRUE"))
debugSource('~/datasciencecoursera/RepData_PeerAssessment1/analysisScript.R')
View(activityRaw)
match(activityRaw$Interval, activityInterval$interval)
r = merge(activityRaw, activityInterval, by="interval", suffixes=c(".raw", ".interval"))
na.idx = which(is.na(activityRaw$steps))
activityRaw[na.idx,"x"] = r[na.idx,"x.Interval"]
View(r)
r = merge(activityRaw, activityInterval)
View(r)
debugSource('~/datasciencecoursera/RepData_PeerAssessment1/analysisScript.R')
View(r)
r <- merge(activityRaw, activityInterval,order(date))
r <- merge(activityRaw, activityInterval,order(r$date))
sort(r,by=r$date)
View(r)
sort(r$date)
View(r)
r <- sort(r$date)
r
r <- r[sort(r$date),]
r <- merge(activityRaw, activityInterval)
r <- r[sort(r$date),]
View(r)
r <- merge(activityRaw, activityInterval)
r <- r[sort(r$date,r$interval),]
View(r)
r <- r[sort(r$date,-r$interval),]
r <- merge(activityRaw, activityInterval)
r <- r[sort(r$date,-r$interval),]
r <- merge(activityRaw, activityInterval)
r <- r[order(r$date,r$interval),]
View(r)
View(r)
activityMerge <- merge(activityRaw, activityInterval)
activityMergeOrdered <- activityMerge[order(activityMerge$date,activityMerge$interval),]
activityMergeOrdered$steps[is.na(activityMergeOrdered$steps)] <- activityMergedOrder$averageSteps[is.na(activityMergedOrder$steps)]
activityMergeOrdered$steps[is.na(activityMergeOrdered$steps)] <- activityMergeOrder$averageSteps[is.na(activityMergeOrder$steps)]
activityMergeOrdered$steps[is.na(activityMergeOrdered$steps)] <- activityMergeOrdered$averageSteps[is.na(activityMergeOrdered$steps)]
View(activityMergeOrdered)
View(activityRemoveNA)
View(activityRaw)
activityComplete <- subset(activityMergeOrdered, select = -c(row.names,averageSteps) )
activityComplete <- subset(activityMergeOrdered, select = -c("row.names","averageSteps") )
activityComplete <- subset(activityMergeOrdered, select = c("steps","date", "interval") )
View(activityComplete)
png(filename="totalStepsComplete.png", width=480, height=480)
hist(activityComplete$steps, main = "Steps Per Day",col="red",xlab="Steps", ylab="Frequency",breaks=10)
dev.off()
View(activityDay)
activityDayComplete <- aggregate(activityComplete$steps,by=list(activityComplete$date),sum)
colnames(activityDayComplete) <- c('date','totalSteps')
activityDayComplete$date <- as.Date(activityDayComplete$date)
png(filename="totalStepsComplete.png", width=480, height=480)
hist(activityDayComplete$totalSteps, main = "Steps Per Day",col="red",xlab="Steps", ylab="Frequency",breaks=10)
dev.off()
meanStepsComplete <- mean(activityDayComplete$totalSteps)
print(paste("Mean total number of steps per day: ",meanStepsComplete))
medianStepsComplete <- median(activityDayComplete$totalSteps)
print(paste("Median total number of steps per day: ",medianStepsComplete))
activityComplete$steps <- round(activityComplete$steps,0)
View(activityComplete)
activityComplete$row.names <- NULL
View(activityComplete)
source('~/datasciencecoursera/RepData_PeerAssessment1/analysisScript.R')
View(activityDayComplete)
View(activityDay)
activityComplete$day <- weekdays.Date(activityComplete$date)
activityComplete$day <- weekdays(activityComplete$date)
activityComplete$day <- weekdays(as.Date(activityComplete$date))
View(activityComplete)
