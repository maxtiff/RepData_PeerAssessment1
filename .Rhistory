install.packages('devtools')
install.packages(c("evaluate", "MASS"))
source('~/getdata/idaho.R')
install.packages("xlsx")
install.packages("xlsx")
install.packages("RJavaTools")
options(java.parameters = "-Xmx1000m")
source('~/getdata/idaho.R')
options(java.parameters = "-Xmx2000m")
source('~/getdata/idaho.R')
install.packages("rJava")
source('~/getdata/idaho.R')
options(java.parameters = "-Xmx1000m")
source('~/getdata/idaho.R')
options(java.parameters = "-Xmx1000m")
source('~/getdata/idaho.R')
options(java.parameters = "-Xmx2000m")
source('~/getdata/idaho.R')
source('~/getdata/idaho.R')
options(java.parameters = "-Xmx5000m")
source('~/getdata/idaho.R')
source('~/getdata/idaho.R')
install.packages("XLConnect")
?XLConnect
??XLConnect
set.seed(100)
norm_vec <- rnorm(n=10, mean=5, sd=2)
sample(norm_vec, size = 25, replace=FALSE)
sample(norm_vec, size = 10, replace=FALSE)
install.packages("rpart")
for (i in 1:10) {}
for (i in 1:10) { if (i %% 2 == 0) { cat(paste(i, "is even.\n", sep=" "))}}
1:10
1:0, function(x) integrate(x ^ 2 - x)
lapply(1:0, function(x) integrate(x ^ 2 - x)
)
integrate(function(x ^ 2 - x))
integrate(function(x) x ^ 2 - x, 0, 10)
library(quantMod)
library(quantmod)
getSymbols.FRED('ITNETUSERP2THA')
getSymbols.FRED(ITNETUSERP2THA)
getSymbols.FRED(GDP)
getSymbols.FRED('GDP')
integrate(function(x) sin(x) + cos(x), -pi,pi)
integrate(function(x) exp(x) / x, 10, 20)
getSymbols.FRED(Symbols=c('ITNETUSERP2THA'))
getSymbols.FRED(Symbols=c('ITNETUSERP2THA'),env=.GlobalEnv,return.class=character)
test <- getSymbols.FRED(Symbols=c('ITNETUSERP2THA'),env=.GlobalEnv,return.class=character)
getSymbols.FRED('gdpc1')
getSymbols.FRED('GDPC1')
library(httr)
apiKey <- '76bb1186e704598b725af0a27159fdfc'
apiString <- '&api_key'
baseUrl <- 'http://api.stlouisfed.org/fred/release/series?release_id='
releaseId <- '234'
fileTypeString <- '&file_type=json'
fullUrl <- paste(baseUrl,releaseId,apiString,fileTypeString,sep="")
fullUrl
release <- GET(fullUrl)
str(release)
json1 <- content(release)
install.packages(jsonlite)
install.packages('jsonlite')
json1 <- content(release)
source('~/datasciencecoursera/functional_R/internetUsageFunctionalScript.R')
fullUrl
source('~/datasciencecoursera/functional_R/internetUsageFunctionalScript.R')
fullUrl
source('~/datasciencecoursera/functional_R/internetUsageFunctionalScript.R')
head(json1)
source('~/datasciencecoursera/functional_R/internetUsageFunctionalScript.R')
source('~/datasciencecoursera/functional_R/internetUsageFunctionalScript.R')
source('~/datasciencecoursera/functional_R/internetUsageFunctionalScript.R')
source('~/datasciencecoursera/functional_R/internetUsageFunctionalScript.R')
head(json1)
tail(json1)
source('~/datasciencecoursera/functional_R/internetUsageFunctionalScript.R')
head(json2)
json2[1,1:4]
json2[1,1]
json2[,1]
json2[,]
json2[,1:4]
json2[1:4,]
json2$seriess
json2$seriess == 'Internet'
json3 <- json2[grepl("ITNET",json2$seriess)]
json3
json2
head(json2,30)
head(json2)
head(json2,10)
head(json2,6)
head(json2,7)
head(json2,8)
json3 <- json2$seriess
head(json3)
json4 <- json3[grepl("ITNET",json3$id)]
json4 <- json3[grepl("ITNET",json3$id),]
head(json4)
json5 <- data.frame(json4$id,json4$title)
View(json5)
json5 <- cbind(json4$id,json4$title)
View(json5)
aseanCtry <- c("Thailand", "Myanmar", "Cambodia", "Laos", "Malaysia", "Vietnam", "Indonesia", "Singapore", "Philipines", "Brunei")
length(aseanCtry)
names(json5) <- c('id', 'title')
View(json5)
names(json5) <- names(c('id', 'title'))
View(json5)
names(json5)
names(json5) <- c('id', 'title')
names(json5)
View(json5)
colnames(json5)
colnames(json5) <- c('id', 'title')
View(json5)
getSeriesIds <- function(x) {
aseanCtry <- c("Thailand", "Myanmar", "Cambodia", "Laos", "Malaysia", "Vietnam", "Indonesia", "Singapore", "Philipines", "Brunei")
lapply(aseanCtry function(x) grepl(x,x=json5$tile))
}
getSeriesIds <- function(x) {
aseanCtry <- c("Thailand", "Myanmar", "Cambodia", "Laos", "Malaysia", "Vietnam", "Indonesia", "Singapore", "Philipines", "Brunei")
lapply(aseanCtry function(f) grepl(f,x=json5$tile))
}
getSeriesIds <- function(x) {
aseanCtry <- c("Thailand", "Myanmar", "Cambodia", "Laos", "Malaysia", "Vietnam", "Indonesia", "Singapore", "Philipines", "Brunei")
lapply(aseanCtry, function(f) grepl(f,x=json5$tile))
}
getSeriesIds <- function(x) {
aseanCtry <- c("Thailand", "Myanmar", "Cambodia", "Laos", "Malaysia", "Vietnam", "Indonesia", "Singapore", "Philipines", "Brunei")
lapply(aseanCtry, function(f) grepl(f,x=json5$title))
}
getSeriesIds <- function(x) {
aseanCtry <- c("Thailand", "Myanmar", "Cambodia", "Laos", "Malaysia", "Vietnam", "Indonesia", "Singapore", "Philipines", "Brunei")
json6 <- lapply(aseanCtry, function(f) grepl(f,x=json5$title))
}
lapply(aseanCtry, function(f) grepl(f,x=json5$title))
View(json5)
test <- lapply(aseanCtry, function(f) grepl(f,x=json5$title))
test
lapply(aseanCtry, function(f) json6[grepl(f,json5$title),])
lapply(aseanCtry, function(f) json5[grepl(f,json5$title),])
View(json5)
lapply(aseanCtry, function(f) which(json5$title == grepl(aseanCtry,json$title)))
lapply(aseanCtry, function(f) which(json5$title == grepl(aseanCtry,json5$title)))
lapply(aseanCtry, function(f) which(json5$title == grepl(aseanCtry,json5$title)))
grepl(function(f) json5$title,aseanCtry)
grepl(function(f) aseanCtry, json5$title)
grepl(aseanCtry, json5$title)
seq_along(grepl(along.with=aseanCtry,json5$title))
seq_along(aseanCtry, function(f) grepl(f, json5$title))
power <- function(exponent) {
function(x) {
x ^ exponent
}
}
square <- power(2)
square(2)
square(x=4)
cube <- power(3)
cube(x=4)
square
as.list(environment(fun=square))
library(pryr)
install.packages('pryr')
rm(json4)
rm(json3)
rm(json2)
rm(json1)
json6 <- json5[grep("Thailand | Myanmar | Cambodia | Laos | Malaysia | Viet Nam | Indonesia |Singapore | Philippines | Brunei"),json5$title,ignore.case=T)]
json6 <- json5[grepl("Thailand | Myanmar | Cambodia | Laos | Malaysia | Viet Nam | Indonesia |Singapore | Philippines | Brunei",json5$title,ignore.case=T)]
json6 <- which(json5[grepl("Thailand | Myanmar | Cambodia | Laos | Malaysia | Viet Nam | Indonesia |Singapore | Philippines | Brunei",json5$title,ignore.case=T)])
json6 <- json5[grep("Thailand | Myanmar | Cambodia | Laos | Malaysia | Viet Nam | Indonesia |Singapore | Philippines | Brunei",json5$title,ignore.case=T)]
json6
json6 <- json5[grep("Thailand | Myanmar | Cambodia | Laos | Malaysia | Viet Nam | Indonesia |Singapore | Philippines | Brunei",json5$title,ignore.case=T),]
View(json6)
json6 <- json5[grep(pattern="Thailand | Myanmar | Cambodia | Laos | Malaysia | Viet Nam | Indonesia |Singapore | Philippines | Brunei",x=json5$title,ignore.case=T)]
json6 <- json5[grep(pattern="(Thailand | Myanmar | Cambodia | Laos | Malaysia | Viet Nam | Indonesia | Singapore | Philippines | Brunei)",x=json5$title,ignore.case=T)]
json6 <- json5[grep(pattern="$(Thailand | Myanmar | Cambodia | Laos | Malaysia | Viet Nam | Indonesia | Singapore | Philippines | Brunei)",x=json5$title,ignore.case=T)]
json6 <- json5[grep(pattern="(Thailand | Myanmar | Cambodia | Laos | Malaysia | Viet Nam | Indonesia | Singapore | Philippines | Brunei)$",x=json5$title,ignore.case=T)]
json6 <- json5[grep(pattern="(Thailand | Myanmar | Cambodia | Laos | Malaysia | Viet Nam | Indonesia | Singapore | Philippines | Brunei)$",x=json5$title,ignore.case=T),]
View(json6)
json6 <- json5[grep(pattern=seq_along(aseanCtry),x=json5$title,ignore.case=T)]
install.packages("knitr")
library(knitr)
?knit
?unlist
random.imp <- function (a){
missing <- is.na(a)
n.missing <- sum(missing)
a.obs <- a[!missing]
imputed <- a
imputed[missing] <- sample (a.obs, n.missing, replace=TRUE)
return (imputed)
}
setwd("~/datasciencecoursera/RepData_PeerAssessment1")
source('~/datasciencecoursera/RepData_PeerAssessment1/analysisScript.R')
debugSource('~/datasciencecoursera/RepData_PeerAssessment1/analysisScript.R')
View(activityImputed)
View(activityRaw)
sum(is.na(activityRaw$steps))
debugSource('~/datasciencecoursera/RepData_PeerAssessment1/analysisScript.R')
View(activityImputed)
activityRaw[,1]
debugSource('~/datasciencecoursera/RepData_PeerAssessment1/analysisScript.R')
View(activityImputed)
is.na(activityRaw[,1])
debugSource('~/datasciencecoursera/RepData_PeerAssessment1/analysisScript.R')
sumMissing
debugSource('~/datasciencecoursera/RepData_PeerAssessment1/analysisScript.R')
debugSource('~/datasciencecoursera/RepData_PeerAssessment1/analysisScript.R')
debugSource('~/datasciencecoursera/RepData_PeerAssessment1/analysisScript.R')
debugSource('~/datasciencecoursera/RepData_PeerAssessment1/analysisScript.R')
View(activityDay)
summary(activityRaw)
?summary
?irmi
??irmi
?VIM
??vim
?vim
install.package('VIM')
install.packages('VIM')
debugSource('~/datasciencecoursera/RepData_PeerAssessment1/analysisScript.R')
debugSource('~/datasciencecoursera/RepData_PeerAssessment1/analysisScript.R')
View(activityImputed)
View(activityInterval)
?seqalong
??seqalong
seq_along(activityRaw$steps function(x) print(x))
seq_along(activityRaw$steps, function(x) print(x))
seq(along=activityRaw$steps, function(x) print(x))
View(activityDay)
seq(along=activityRaw$steps)
seq(along=activityRaw$steps function(x) print(x))
seq(along=activityRaw$steps, function(x) print(x))
seq(along=activityRaw$steps, function(x) sd(x))
lapply(activityRaw$steps, function(x) sd(x))
?replace
summary(activityRaw)$NAs
summary(activityRaw)
summary(activityRaw).NAs
summary(is.na(activityRaw))
summary(activityRemoveNA)
summary(activityDay)
summary(activityDay)$Mean
?summary
?sql
??sql
activityInterval[max(activityInterval$averageSteps),]
View(activityInterval)
activityInterval[max(activityInterval$averageSteps),]
maxMeanInterval <- activityInterval[max(activityInterval$averageSteps),]
print(paste("Interval",maxMeanInterval$interval,"has the most average steps with",maxMeanInterval$averageSteps,sep=" "))
g <- ggplot((activityInterval, aes(interval, averageSteps))
g + geom_line(aes( y = averageSteps )
)
g <- ggplot((activityInterval, aes(interval, averageSteps))
g + geom_line(aes( y = averageSteps ) + xlab="Interval" + ylab="Steps" + scale_color_brewer()
ggsave(filename="meanSteps.png", width=4.80, height=4.80, dpi = 100)
debugSource('~/datasciencecoursera/RepData_PeerAssessment1/analysisScript.R')
debugSource('~/datasciencecoursera/RepData_PeerAssessment1/analysisScript.R')
debugSource('~/datasciencecoursera/RepData_PeerAssessment1/analysisScript.R')
debugSource('~/datasciencecoursera/RepData_PeerAssessment1/analysisScript.R')
