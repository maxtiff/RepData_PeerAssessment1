install.packages('devtools')
install.packages(c("evaluate", "MASS"))
source('~/getdata/idaho.R')
install.packages("xlsx")
install.packages("xlsx")
install.packages("RJavaTools")
options(java.parameters = "-Xmx1000m")
source('~/getdata/idaho.R')
options(java.parameters = "-Xmx2000m")
source('~/getdata/idaho.R')
install.packages("rJava")
source('~/getdata/idaho.R')
options(java.parameters = "-Xmx1000m")
source('~/getdata/idaho.R')
options(java.parameters = "-Xmx1000m")
source('~/getdata/idaho.R')
options(java.parameters = "-Xmx2000m")
source('~/getdata/idaho.R')
source('~/getdata/idaho.R')
options(java.parameters = "-Xmx5000m")
source('~/getdata/idaho.R')
source('~/getdata/idaho.R')
install.packages("XLConnect")
?XLConnect
??XLConnect
set.seed(100)
norm_vec <- rnorm(n=10, mean=5, sd=2)
sample(norm_vec, size = 25, replace=FALSE)
sample(norm_vec, size = 10, replace=FALSE)
install.packages("rpart")
for (i in 1:10) {}
for (i in 1:10) { if (i %% 2 == 0) { cat(paste(i, "is even.\n", sep=" "))}}
1:10
1:0, function(x) integrate(x ^ 2 - x)
lapply(1:0, function(x) integrate(x ^ 2 - x)
)
integrate(function(x ^ 2 - x))
integrate(function(x) x ^ 2 - x, 0, 10)
library(quantMod)
library(quantmod)
getSymbols.FRED('ITNETUSERP2THA')
getSymbols.FRED(ITNETUSERP2THA)
getSymbols.FRED(GDP)
getSymbols.FRED('GDP')
integrate(function(x) sin(x) + cos(x), -pi,pi)
integrate(function(x) exp(x) / x, 10, 20)
getSymbols.FRED(Symbols=c('ITNETUSERP2THA'))
getSymbols.FRED(Symbols=c('ITNETUSERP2THA'),env=.GlobalEnv,return.class=character)
test <- getSymbols.FRED(Symbols=c('ITNETUSERP2THA'),env=.GlobalEnv,return.class=character)
getSymbols.FRED('gdpc1')
getSymbols.FRED('GDPC1')
library(httr)
apiKey <- '76bb1186e704598b725af0a27159fdfc'
apiString <- '&api_key'
baseUrl <- 'http://api.stlouisfed.org/fred/release/series?release_id='
releaseId <- '234'
fileTypeString <- '&file_type=json'
fullUrl <- paste(baseUrl,releaseId,apiString,fileTypeString,sep="")
fullUrl
release <- GET(fullUrl)
str(release)
json1 <- content(release)
install.packages(jsonlite)
install.packages('jsonlite')
json1 <- content(release)
source('~/datasciencecoursera/functional_R/internetUsageFunctionalScript.R')
fullUrl
source('~/datasciencecoursera/functional_R/internetUsageFunctionalScript.R')
fullUrl
source('~/datasciencecoursera/functional_R/internetUsageFunctionalScript.R')
head(json1)
source('~/datasciencecoursera/functional_R/internetUsageFunctionalScript.R')
source('~/datasciencecoursera/functional_R/internetUsageFunctionalScript.R')
source('~/datasciencecoursera/functional_R/internetUsageFunctionalScript.R')
source('~/datasciencecoursera/functional_R/internetUsageFunctionalScript.R')
head(json1)
tail(json1)
source('~/datasciencecoursera/functional_R/internetUsageFunctionalScript.R')
head(json2)
json2[1,1:4]
json2[1,1]
json2[,1]
json2[,]
json2[,1:4]
json2[1:4,]
json2$seriess
json2$seriess == 'Internet'
json3 <- json2[grepl("ITNET",json2$seriess)]
json3
json2
head(json2,30)
head(json2)
head(json2,10)
head(json2,6)
head(json2,7)
head(json2,8)
json3 <- json2$seriess
head(json3)
json4 <- json3[grepl("ITNET",json3$id)]
json4 <- json3[grepl("ITNET",json3$id),]
head(json4)
json5 <- data.frame(json4$id,json4$title)
View(json5)
json5 <- cbind(json4$id,json4$title)
View(json5)
aseanCtry <- c("Thailand", "Myanmar", "Cambodia", "Laos", "Malaysia", "Vietnam", "Indonesia", "Singapore", "Philipines", "Brunei")
length(aseanCtry)
names(json5) <- c('id', 'title')
View(json5)
names(json5) <- names(c('id', 'title'))
View(json5)
names(json5)
names(json5) <- c('id', 'title')
names(json5)
View(json5)
colnames(json5)
colnames(json5) <- c('id', 'title')
View(json5)
getSeriesIds <- function(x) {
aseanCtry <- c("Thailand", "Myanmar", "Cambodia", "Laos", "Malaysia", "Vietnam", "Indonesia", "Singapore", "Philipines", "Brunei")
lapply(aseanCtry function(x) grepl(x,x=json5$tile))
}
getSeriesIds <- function(x) {
aseanCtry <- c("Thailand", "Myanmar", "Cambodia", "Laos", "Malaysia", "Vietnam", "Indonesia", "Singapore", "Philipines", "Brunei")
lapply(aseanCtry function(f) grepl(f,x=json5$tile))
}
getSeriesIds <- function(x) {
aseanCtry <- c("Thailand", "Myanmar", "Cambodia", "Laos", "Malaysia", "Vietnam", "Indonesia", "Singapore", "Philipines", "Brunei")
lapply(aseanCtry, function(f) grepl(f,x=json5$tile))
}
getSeriesIds <- function(x) {
aseanCtry <- c("Thailand", "Myanmar", "Cambodia", "Laos", "Malaysia", "Vietnam", "Indonesia", "Singapore", "Philipines", "Brunei")
lapply(aseanCtry, function(f) grepl(f,x=json5$title))
}
getSeriesIds <- function(x) {
aseanCtry <- c("Thailand", "Myanmar", "Cambodia", "Laos", "Malaysia", "Vietnam", "Indonesia", "Singapore", "Philipines", "Brunei")
json6 <- lapply(aseanCtry, function(f) grepl(f,x=json5$title))
}
lapply(aseanCtry, function(f) grepl(f,x=json5$title))
View(json5)
test <- lapply(aseanCtry, function(f) grepl(f,x=json5$title))
test
lapply(aseanCtry, function(f) json6[grepl(f,json5$title),])
lapply(aseanCtry, function(f) json5[grepl(f,json5$title),])
View(json5)
lapply(aseanCtry, function(f) which(json5$title == grepl(aseanCtry,json$title)))
lapply(aseanCtry, function(f) which(json5$title == grepl(aseanCtry,json5$title)))
lapply(aseanCtry, function(f) which(json5$title == grepl(aseanCtry,json5$title)))
grepl(function(f) json5$title,aseanCtry)
grepl(function(f) aseanCtry, json5$title)
grepl(aseanCtry, json5$title)
seq_along(grepl(along.with=aseanCtry,json5$title))
seq_along(aseanCtry, function(f) grepl(f, json5$title))
power <- function(exponent) {
function(x) {
x ^ exponent
}
}
square <- power(2)
square(2)
square(x=4)
cube <- power(3)
cube(x=4)
square
as.list(environment(fun=square))
library(pryr)
install.packages('pryr')
rm(json4)
rm(json3)
rm(json2)
rm(json1)
json6 <- json5[grep("Thailand | Myanmar | Cambodia | Laos | Malaysia | Viet Nam | Indonesia |Singapore | Philippines | Brunei"),json5$title,ignore.case=T)]
json6 <- json5[grepl("Thailand | Myanmar | Cambodia | Laos | Malaysia | Viet Nam | Indonesia |Singapore | Philippines | Brunei",json5$title,ignore.case=T)]
json6 <- which(json5[grepl("Thailand | Myanmar | Cambodia | Laos | Malaysia | Viet Nam | Indonesia |Singapore | Philippines | Brunei",json5$title,ignore.case=T)])
json6 <- json5[grep("Thailand | Myanmar | Cambodia | Laos | Malaysia | Viet Nam | Indonesia |Singapore | Philippines | Brunei",json5$title,ignore.case=T)]
json6
json6 <- json5[grep("Thailand | Myanmar | Cambodia | Laos | Malaysia | Viet Nam | Indonesia |Singapore | Philippines | Brunei",json5$title,ignore.case=T),]
View(json6)
json6 <- json5[grep(pattern="Thailand | Myanmar | Cambodia | Laos | Malaysia | Viet Nam | Indonesia |Singapore | Philippines | Brunei",x=json5$title,ignore.case=T)]
json6 <- json5[grep(pattern="(Thailand | Myanmar | Cambodia | Laos | Malaysia | Viet Nam | Indonesia | Singapore | Philippines | Brunei)",x=json5$title,ignore.case=T)]
json6 <- json5[grep(pattern="$(Thailand | Myanmar | Cambodia | Laos | Malaysia | Viet Nam | Indonesia | Singapore | Philippines | Brunei)",x=json5$title,ignore.case=T)]
json6 <- json5[grep(pattern="(Thailand | Myanmar | Cambodia | Laos | Malaysia | Viet Nam | Indonesia | Singapore | Philippines | Brunei)$",x=json5$title,ignore.case=T)]
json6 <- json5[grep(pattern="(Thailand | Myanmar | Cambodia | Laos | Malaysia | Viet Nam | Indonesia | Singapore | Philippines | Brunei)$",x=json5$title,ignore.case=T),]
View(json6)
json6 <- json5[grep(pattern=seq_along(aseanCtry),x=json5$title,ignore.case=T)]
install.packages("knitr")
library(knitr)
?knit
?unlist
setwd("~/datasciencecoursera/RepData_PeerAssessment1")
source('~/datasciencecoursera/RepData_PeerAssessment1/analysisScript.R')
View(activityComplete)
?lubridate
??lubridate
source('~/datasciencecoursera/RepData_PeerAssessment1/analysisScript.R')
activityWeekdays <- activityComplete[isWeekday(activityComplete),]
install.packages("timeDate")
library(timeDate)
activityWeekdays <- activityComplete[isWeekday(activityComplete),]
View(activityComplete)
activityWeekdays <- activityComplete[isWeekday(activityComplete$day),]
activityWeekdays <- activityComplete[isWeekday(activityComplete$date),]
View(activityWeekdays)
activityWeekends <- activityComplete[isWeekend(activityComplete$date),]
View(activityWeekends)
View(activityDay)
View(maxMeanInterval)
View(activityComplete)
activityComplete$day <- factor(ifelse(as.POSIXlt(activityComplete$date)$wday %% 6 == 0, "Weekend", "Weekday"))
View(activityComplete)
source('~/datasciencecoursera/RepData_PeerAssessment1/analysisScript.R')
View(activityComplete)
library(lattice)
xyplot(steps ~ interval | day, data = activityComplete, layout = c(1, 2))
xyplot(steps ~ interval | day, data = activityComplete, layout = c(1, 2), type = "l")
histogram(activityDay$totalSteps,main = "Steps Per Day",col="red",xlab="Steps", ylab="Frequency",breaks=10)
histogram(activityDayComplete$totalSteps,main = "Steps Per Day",col="red",xlab="Steps", ylab="Frequency",breaks=10)
xyplot(mean(steps) ~ interval | day, data = activityComplete, layout = c(1, 2), type = "l",)
xyplot((aggregate(activityComlete$steps, by=list(activityComplete$interval),mean) ~ interval | day, data = activityComplete, layout = c(1, 2), type = "l",)
xyplot((aggregate(activityComlete$steps, by=list(activityComplete$interval),mean) ~ interval | day, data = activityComplete, layout = c(1, 2), type = "l")
xyplot(steps ~ interval | day, data = activityComplete, layout = c(1, 2), type = "l")
activityCompleteInterval <- aggregate(activityComplete$steps, by=list(activityComplete$interval), by=list(activityComplete$day),mean))
activityCompleteInterval <- aggregate(activityComplete$steps, by=list(activityComplete$interval), by=list(activityComplete$day),mean)
activityCompleteInterval <- aggregate(activityComplete$steps, by=list(activityComplete$interval,activityComplete$day),mean)
View(activityCompleteInterval)
xyplot(steps ~ interval | day, data = activityCompleteInterval, layout = c(1, 2), type = "l")
View(activityCompleteInterval)
names(activityCompleteInterval) <- c("interval", "day", "averageSteps")
View(activityCompleteInterval)
xyplot(averageSteps ~ interval | day, data = activityCompleteInterval, layout = c(1, 2), type = "l")
xyplot(averageSteps ~ interval | day, data = activityCompleteInterval, layout = c(1, 2), type = "l", ylab="Average Steps")
xyplot(averageSteps ~ interval, data = activityInterval, type = "l", ylab="Average Steps", xlab="Interval")
xyplot(averageSteps ~ interval, data = activityInterval, type = "l", ylab="Average Steps", xlab="Interval",outer="Average Steps Taken per 5-Minute Interval")
xyplot(averageSteps ~ interval, data = activityInterval, type = "l", ylab="Average Steps", xlab="Interval",Main="Average Steps Taken per 5-Minute Interval")
xyplot(averageSteps ~ interval, data = activityInterval, type = "l", ylab="Average Steps", xlab="Interval", main="Average Steps Taken per 5-Minute Interval")
xyplot(averageSteps ~ interval | day, data = activityCompleteInterval, layout = c(1, 2), type = "l", ylab="Average Steps", xlab="Interval"main="Average Steps Taken per 5-Minute Interval; Weekday vs. Weekend")
xyplot(averageSteps ~ interval | day, data = activityCompleteInterval, layout = c(1, 2), type = "l", ylab="Average Steps", xlab="Interval", main="Average Steps Taken per 5-Minute Interval; Weekday vs. Weekend")
sum(missings)
source('~/datasciencecoursera/RepData_PeerAssessment1/analysisScript.R')
mean(activityDayComplete$totalSteps)
median(activityDayComplete$totalSteps)
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
1. Load the data (i.e. `read.csv()`)
```{r}
## Unzip activity file.
zipFilename <- "activity.zip"
zipPath <- file.path(zipFilename)
activityFile <- unzip(zipPath)
## Read in data file, retain 'NA' values
activityRaw <- read.csv(activityFile)
```
summary(activityInterval$averagesteps)
summary(activityInterval$averageSteps)
activityInterval[max(activityInterval$averageSteps),]
activityInterval[max(activityInterval$averageSteps),]
max(activityInterval$averageSteps)
subset(activityInterval,averageSteps==max(averageSteps))interval
subset(activityInterval,averageSteps==max(averageSteps))$interval
activityInterval,averageSteps==max(averageSteps)
activityInterval[averageSteps==max(averageSteps),]
activityInterval[max(averageSteps),]
activityInterval[max(activityInterval$averageSteps),]
max(activityInterval$averageSteps)
ctivityInterval$interval[max(activityInterval$averageSteps),]
activityInterval$interval[max(activityInterval$averageSteps),]
activityInterval[max(activityInterval$averageSteps),]
aggregate(interval,activityInterval, max)
aggregate(interval~averageSteps,activityInterval, max)
